<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.k2.processmining.mapper.EventLogMapper">

    <insert id="save" parameterType="EventLog">
        INSERT INTO event_log(id, log_name, create_date, userid, format, normal_log_id, state, isshared,
         merge_relation, case_number, event_number, per_event_incase, event_names, operator_names)
        VALUES (#{id}, #{logName}, #{createDate}, #{userId}, #{format}, #{normalLogId}, #{state}, #{isShared},
                  #{mergeRelation}, #{caseNumber}, #{eventNumber}, #{perEventInCase}, #{eventNames}, #{operatorNames})
    </insert>
    
    <select id="getLogById" resultMap="eventLog">
        SELECT * FROM event_log WHERE id=#{id}
    </select>


    <select id="listLogGroups" resultMap="org.k2.processmining.mapper.RawLogMapper.logGroup">
        SELECT
        <include refid="org.k2.processmining.mapper.RawLogMapper.addUserColumnIfUserIdIsNull"/>
        <include refid="org.k2.processmining.mapper.RawLogMapper.logGroupSelectColumns"/>
        FROM
            (SELECT * FROM event_log WHERE
                <include refid="org.k2.processmining.mapper.RawLogMapper.addUserIdIfNotNull"/>
                state=#{state}
                <include refid="org.k2.processmining.mapper.RawLogMapper.addIsSharedIfNotMinus1"/>
                <include refid="org.k2.processmining.mapper.RawLogMapper.addKeyWordIfNotNull"/>
            ) EL
            LEFT JOIN
            (SELECT * FROM normal_log <if test="userId != null">WHERE userid=#{userId}</if>
              ) NL ON EL.normal_log_id = NL.id
              LEFT JOIN
              (SELECT * FROM raw_log WHERE 
                  <include refid="org.k2.processmining.mapper.RawLogMapper.addUserIdIfNotNull"/>
                  state=#{state} 
                  <include refid="org.k2.processmining.mapper.RawLogMapper.addIsSharedIfNotMinus1"/>
              ) RL ON NL.raw_log_id = RL.id
            <if test="userId == null">
                LEFT JOIN user ON EL.userid = user.id
            </if>
    </select>

    <update id="updateLogState">
        <include refid="org.k2.processmining.mapper.RawLogMapper.updateLogStateSQL">
            <property name="table" value="event_log"/>
        </include>
    </update>

    <update id="updateIsShared">
        <include refid="org.k2.processmining.mapper.RawLogMapper.updateIsSharedSQL">
            <property name="table" value="event_log"/>
        </include>
    </update>

    <select id="listLogGroupsPage" resultMap="org.k2.processmining.mapper.RawLogMapper.logGroup">
        SELECT
        <include refid="org.k2.processmining.mapper.RawLogMapper.addUserColumnIfUserIdIsNull"/>
        <include refid="org.k2.processmining.mapper.RawLogMapper.logGroupSelectColumns"/>
        FROM
            (SELECT * FROM event_log WHERE
                <include refid="org.k2.processmining.mapper.RawLogMapper.addUserIdIfNotNull"/>
                state=#{state}
                <include refid="org.k2.processmining.mapper.RawLogMapper.addIsSharedIfNotMinus1"/>
                <include refid="org.k2.processmining.mapper.RawLogMapper.addKeyWordIfNotNull"/>
                ORDER BY create_date DESC LIMIT #{offset}, #{size}
            ) EL
            LEFT JOIN
            (SELECT * FROM normal_log <if test="userId != null">WHERE userid=#{userId}</if>
              ) NL ON EL.normal_log_id = NL.id
              LEFT JOIN
              (SELECT * FROM raw_log WHERE 
                  <include refid="org.k2.processmining.mapper.RawLogMapper.addUserIdIfNotNull"/>
                  state=#{state} 
                  <include refid="org.k2.processmining.mapper.RawLogMapper.addIsSharedIfNotMinus1"/>
              ) RL ON NL.raw_log_id = RL.id
            <if test="userId == null">
                LEFT JOIN user ON EL.userid = user.id
            </if>
        
    </select>

    <select id="countLogs" resultType="int">
        SELECT
          COUNT(*)
        FROM event_log
        WHERE
          <include refid="org.k2.processmining.mapper.RawLogMapper.addUserIdIfNotNull"/>
          state=#{state}
          <include refid="org.k2.processmining.mapper.RawLogMapper.addIsSharedIfNotMinus1"/>
          <include refid="org.k2.processmining.mapper.RawLogMapper.addKeyWordIfNotNull"/>
    </select>

    <select id="lineOfLogId" resultType="int">
        set @line:=0;
        SELECT
          line
        FROM
            (SELECT
              id, @line:=@line+1 as line
            FROM
              event_log
            WHERE
              <include refid="org.k2.processmining.mapper.RawLogMapper.addUserIdIfNotNull"/>
              state=#{state}
              <include refid="org.k2.processmining.mapper.RawLogMapper.addIsSharedIfNotMinus1"/>
              ORDER BY create_date DESC
              ) as t
        WHERE id=#{id}
    </select>

    <select id="listEventLogByIds" resultMap="eventLog">
        SELECT *
        FROM event_log
        WHERE id in
        <foreach item="item" index="index" collection="ids"
                 open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

    <resultMap id="eventLog" type="EventLog">
        <id column="id" property="id"/>
        <result column="log_name" property="logName"/>
        <result column="create_date" property="createDate"/>
        <result column="userid" property="userId"/>
        <result column="format" property="format"/>
        <result column="normal_log_id" property="normalLogId"/>
        <result column="isshared" property="isShared"/>
        <result column="state" property="state"/>
        <result column="merge_relation" property="mergeRelation"/>
        <result column="case_number" property="caseNumber"/>
        <result column="event_number" property="eventNumber"/>
        <result column="per_event_incase" property="perEventInCase"/>
        <result column="event_names" property="eventNames"/>
        <result column="operator_names" property="operatorNames"/>
    </resultMap>


</mapper>